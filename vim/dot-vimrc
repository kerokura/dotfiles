nnoremap <Space> <nop>
let mapleader = "\<Space>"

" PLUGIN {{{

" vim-plug {{{

if has('win32')
    call plug#begin('~/vimfiles/plugged')
else
    call plug#begin('~/.vim/plugged')
endif

Plug 'deton/jasentence.vim'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'junegunn/vim-easy-align'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'vimwiki/vimwiki'
Plug 'suan/vim-instant-markdown', {'rtp': 'after'}
Plug 'ap/vim-css-color'
Plug 'junegunn/goyo.vim'
Plug 'morhetz/gruvbox'

call plug#end()

" }}}
" Settings {{{

" EasyAlign {{{

xmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>= <Plug>(EasyAlign)ii*=<CR>
nmap <Leader>: <Plug>(EasyAlign)ii<RIGHT>:<CR>
nmap <Leader>t vip:s/\v\s\s+/<BAR>/g<CR>gv:s/^/<BAR><CR>gv:s/$/<BAR><CR><Plug>(EasyAlign)ii*<BAR>'<yyp:s/\v[^ <BAR>]/-/g<CR>:nohlsearch<CR>
nmap <Leader>T <Plug>(EasyAlign)ii*<Bar><CR>

" }}}
" Abolish {{{

nnoremap <Leader>/a :%Subvert/{}/{}/g<LEFT><LEFT><LEFT><LEFT><LEFT><LEFT>
nnoremap <silent> <Leader>n :Subvert/{true,false}/{false,true}/g<CR>:nohlsearch<CR>
vnoremap <silent> <Leader>n :Subvert/{true,false}/{false,true}/g<CR>:nohlsearch<CR>

" }}}
" Goyo {{{

nnoremap <ESC>G :Goyo<CR>

" }}}
" vimwiki {{{

let g:vimwiki_list = [{'path': '~/vimwiki/vim', 'syntax': 'markdown', 'ext': '.md'}]
let g:vimwiki_ext2syntax = {'.md': 'markdown'}
let g:vimwiki_folding = 'expr'
let g:vimwiki_url_maxsave=0

" those mappings get in the way
nmap  <Leader>v<Space>i   <Plug>VimwikiDiaryGenerateLinks
nmap  <Leader>v<Space>m   <Plug>VimwikiMakeTomorrowDiaryNote
nmap  <Leader>v<Space>t   <Plug>VimwikiTabMakeDiaryNote
nmap  <Leader>v<Space>w   <Plug>VimwikiMakeDiaryNote
nmap  <Leader>v<Space>y   <Plug>VimwikiMakeYesterdayDiaryNote
nmap  <Leader>vi     <Plug>VimwikiDiaryIndex
nmap  <Leader>vs     <Plug>VimwikiUISelect
nmap  <Leader>vt     <Plug>VimwikiTabIndex
nmap  <Leader>vw     <Plug>VimwikiIndex

" NOTE:
" comment out al/il lines
" bundle/vimwiki/ftplugin/vimwiki.vim

" }}}
" instant-markdown {{{

let g:instant_markdown_autostart = 0
let g:instant_markdown_port = 8890

" NOTE:
" modify instant-markdown-d's css, as default font size is a bit large
" .markdown-body {
" ... omit ...
"   /* font-size: 16px; */
"   font-size: 14px;
" ... omit ...
" }
" /usr/local/lib/node_modules/instant-markdown-d/css/github-markdown.css
" %APPDATA%\npm\node_modules\instant-markdown-d\css\github-markdown.css

" }}}
" misc {{{
 
runtime macros/matchit.vim

" }}}

" }}} 

" }}}

" VARIABLE {{{

let g:ft_man_open_mode = 'vert'
let g:ft_man_folding_enable = 1

" }}}

" OPTION {{{

if has("syntax")
    syntax on
endif

" 4 spaces for indent
set expandtab
set softtabstop=4
set autoindent
set shiftwidth=4

" soft wrapping
set wrap
set linebreak
set nolist
set textwidth=0
set wrapmargin=0

" search
set hlsearch
set incsearch
set grepprg=ag\ --vimgrep\ $*
set grepformat=%f:%l:%c:%m
set errorformat+=%f

" split
set diffopt+=vertical
set splitright
set splitbelow

" fold
set foldmethod=marker

" format
set formatoptions=qlBj

" tabline
set tabline=%!MyTabLine()

" K
set keywordprg=:vert\ help

" misc
set display=lastline
set history=1000
set complete+=k
set number
set relativenumber
set cursorline
set showcmd
set path=.,,**
set wildmenu
set wildmode=full
set clipboard=unnamedplus
set backspace=indent,eol,start
set nrformats=
set laststatus=2
set noswapfile
set hidden
 
" }}}

" COLORS {{{

if !has('gui_running') && !has('win32')
    set term=screen
endif
set t_Co=256

function! TweakHighlight() abort
    highlight! link StatusLine SignColumn
    highlight! link StatusLineNC VertSplit
    highlight! link TabLineSel Normal
    highlight! VimwikiHeaderChar guibg=bg guifg=#fe8019 gui=bold ctermbg=bg ctermfg=208 term=bold
endfunction

augroup TweakHighlight
    autocmd!
    autocmd ColorScheme * call TweakHighlight()
augroup END

let g:gruvbox_bold      = 1
let g:gruvbox_italic    = 0
let g:gruvbox_underline = 0
colorscheme gruvbox
set background=dark

" }}}

" FUNCTION {{{

" Status/Tab line {{{

function! GetBranchName()
    let fugitiveStr = FugitiveStatusline()
    let name = substitute(fugitiveStr, '\v\[Git\((\w+)\)\]', '\1', '')
    if strlen(name) >=# 1
        let name = 'î‚  ' . name
    endif
    return name
endfunction

function! SetMyStatusLine(active)
    if a:active ==# 1
        setlocal statusline=%#Normal#%(\ %h%w%q%)\ %f%4(%r%m%*%)\ \ %*
        setlocal statusline+=%#FoldColumn#%{GetBranchName()}\ %*%=
        setlocal statusline+=%#BufTabLineActive#\ \ %y
        setlocal statusline+=\ %{(&fenc!=''?&fenc:&enc)}\ %{&ff}
        setlocal statusline+=\ %#StatusLine#\ \ \ \ %l/%L\ %3c
        setlocal statusline+=\ 
    else
        setlocal statusline=%#StatusLineNC#%f
    endif
endfunction

function! MyTabLine()
    let s = ''
    for i in range(tabpagenr('$'))
        if i + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif

	    let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
    endfor
    let s .= '%#TabLineFill#%T'
    return s
endfunction

function! MyTabLabel(n)
    let buflist = tabpagebuflist(a:n)
    let winnr = tabpagewinnr(a:n)
    let bname = bufname(buflist[winnr - 1])

    if bname ==# ''
        let bname = '[no name]'
    endif

    return bname->split('\/')[-1]
endfunction

" }}}
" Operator Func {{{

function! ClearIndent(type) abort
    silent execute "normal! '[V']:left\r"
endfunction

function! FormatterOp(type)
    let cmd   = ''
    let char1 = nr2char(getchar())

    if char1 ==# 'j'
        let cmd = 'jq --indent 4'
    elseif char1 ==# 's'
        let cmd = 'js-beautify'
    elseif char1 ==# 'x'
        let cmd = 'xmlstarlet fo -o -R -s 4'
    elseif char1 ==# 'h'
        let cmd = 'xmlstarlet fo -o -R -s 4 -D -H'
    else
        return
    endif

    if a:type =~# '[vV]'
        silent execute "normal! gv:'<'>!" . cmd . "\r"
    else
        silent execute "normal! '[V']:!" . cmd . "\r"
    endif
endfunction

function! YankToMemo(type, ...) range
    let sel_save = &selection
    let &selection = 'inclusive'
    let append_line = 0

    if a:type ==# 'line'
        normal! '[y']
    elseif a:type ==# 'char'
        let append_line = 1
        normal! `[v`]y
    elseif a:type ==# 'V'
        normal! gvy
    elseif a:type ==# 'v'
        let append_line = 1
        normal! gvy
    endif

    let win_to_return = winnr()
    wincmd l
    wincmd k
    normal! G

    if append_line
        call append('.', '')
        normal! j
    endif

    normal! p
    execute win_to_return . 'wincmd w'
    let &selection = sel_save
endfunction

function! JoinLines(type) range
    let reg_save = @@
    normal! '[d']
    let text = @@

    let lines = split(text, '\n')
    let char1 = nr2char(getchar())

    if char1 ==# '"' || char1 ==# "'"
        let i = 0
        while i < len(lines)
            let lines[i] = char1 . lines[i] . char1
            let i = i + 1
        endwhile
        let delim = nr2char(getchar()) . ' '
    else
        let delim = char1 . ' '
    endif

    let new_line = join(lines, delim)
    call setline('.', new_line)
    call append('.', '')
    let @@ = reg_save
endfunction

function! MarkListItems(type) range
    let reg_save = @@

    if a:type ==# 'V'
        normal! '<y'>
    elseif a:type ==# 'line'
        normal! '[V']y
    else
        finish
    endif

    let lines = split(@@, '\n')
    let indent = substitute(lines[0], '\v^(\s*)(\S.*)$', '\1', '')
    let order_style = 'stardash'
    let nr = getchar()
    let c = nr2char(nr)

    if c =~ '\v\d'
        let order_style = 'number'
        let n = c - 1
    elseif c =~# '[a-z]'
        let order_style = 'salpha'
        let n = nr - 1
    elseif c =~# '[A-Z]'
        let order_style = 'lalpha'
        let n = nr - 1
    elseif c ==# ' '
        let mark = ''
    elseif c ==# '['
        let mark = '- [ ] '
    else
        let mark = c . ' '
    endif

    let i = 0

    while i < len(lines)
        if lines[i] =~ '\v^' . indent . '\S' && lines[i] !~ '\v^\s*$'
            if order_style ==# 'number'
                let n = n + 1
                let mark = n . '. '
            elseif order_style =~# '\v^.alpha$'
                let n = n + 1
                let mark = nr2char(n) . '. '
            endif
            let lines[i] = substitute(lines[i], '\v^(\s*)(\d+\.\s|[a-zA-Z]\.\s|[*-]\s\[[.OoXx ]\]\s|[*-]\s)?(\S.*)', '\=submatch(1) . mark . submatch(3)', '')
        endif
        let i = i + 1
    endwhile

    let @@ = join(lines, "\n")
    silent! normal! gv"0p
    let @@ = reg_save
endfunction

" }}}
" Change Modes {{{

function! ToggleBackground()
    if &background ==# 'dark'
        set background=light
    else
        set background=dark
    endif
endfunction

function! ChangeGruvboxContrast(val)
    let g:gruvbox_contrast_dark = a:val
    let g:gruvbox_contrast_light = a:val
    colorscheme gruvbox
endfunction

" }}}
" Misc {{{

function! OpenRC(prog)
    if a:prog ==# 'vim'
        let path = '~/git/dotfiles/vim/dot-vimrc'
    elseif a:prog ==# 'bash'
        let path =  '~/git/dotfiles/bash/dot-bashrc'
    elseif a:prog ==# 'tmux'
        let path =  '~/git/dotfiles/tmux/dot-tmux.conf'
    elseif a:prog ==# 'xres'
        let path =  '~/git/dotfiles/X/dot-Xresources'
    else
        let path = '~/git/dotfiles/vim/dot-vimrc'
    endif
    silent! execute '$tabnew'
    silent! execute 'lcd ~/git/dotfiles'
    silent! execute 'e ' . path
endfunction

function BufDoVim(pattern)
    cexpr []
    normal mA
    silent! execute 'bufdo vimgrepadd /\v' . a:pattern . '/gj %'
    normal 'A
    copen
endfunction

" vimcasts.org - show highlight group for the cword
function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" }}}

" }}}

" COMMAND {{{

command! -nargs=1 -complete=file Rename file <args> | write | call delete(expand('#'))
command! -nargs=0 Cd lcd $HOME/Desktop

" }}}

" MAPPING {{{

" Operator {{{

" clear indentation
nnoremap <Leader>< :set operatorfunc=ClearIndent<CR>g@
vnoremap <Leader>< :left<CR>

" yank to another buffer in the right
nnoremap <Leader>y :set operatorfunc=YankToMemo<CR>g@
vnoremap <Leader>y :call YankToMemo(visualmode(), 1)<CR>
nnoremap <Leader>yy 0:set operatorfunc=YankToMemo<CR>g@$

" join lines with delimiters
nmap <silent> <Plug>(JoinLines) :set operatorfunc=JoinLines<CR>g@
nmap <silent> <Leader>j <Plug>(JoinLines)
vnoremap <silent> <Leader>j :call JoinLines(visualmode())<CR>

" mark lines as list
vmap <silent> <Leader>l :call MarkListItems(visualmode())<CR>
nmap <silent> <Leader>l :set operatorfunc=MarkListItems<CR>g@ii

" formatter (need them to be opfunc to deal with embedded json/xml etc...)
nmap <silent> <Leader>f :set operatorfunc=FormatterOp<CR>g@
vmap <silent> <Leader>f :<C-U> call FormatterOp(visualmode())<CR>

" }}}
" Motion {{{

nnoremap n nzzzv
nnoremap N Nzzzv

" }}}
" Text Object {{{

" custom pairs
let surroundings = ['<Bar>', '<Bslash>', ':', ',', '.', '/', ';', '_', '#', '&']
for s in surroundings
    execute printf("vnoremap i%s :<C-U>execute 'normal! T%svt%s'<CR>", s, s, s)
    execute printf("onoremap i%s :<C-U>execute 'normal! T%svt%s'<CR>", s, s, s)
    " treat char more like delimiter than surrounding
    execute printf("vnoremap a%s :<C-U>execute 'normal! F%svt%s'<CR>", s, s, s)
    execute printf("onoremap a%s :<C-U>execute 'normal! F%svt%s'<CR>", s, s, s)
endfor

" inner line, entire buffer
onoremap il :normal! ^vg_<CR>
vnoremap il :<C-U>normal! ^vg_<CR>
onoremap ie :normal! ggVG<CR>
vnoremap ie :<C-U>normal! ggVG<CR>

" }}}
" Search {{{

" set \c instead of 'ignorecase' as I prefer case sensitive when sub/del
nnoremap / /\v\c
nnoremap <Leader>h :nohlsearch<CR>

" substitution
nnoremap <Leader>/s :%s/\v//g<LEFT><LEFT><LEFT>
nnoremap <Leader>/S :%s/\v^//g<LEFT><LEFT><LEFT>
vnoremap <Leader>/s :s/\v//g<LEFT><LEFT><LEFT>
vnoremap <Leader>/S :s/\v^//g<LEFT><LEFT><LEFT>

" grep
nnoremap <Leader><C-G> :silent grep! ""<BAR>copen<BAR>redraw!<C-LEFT><RIGHT>
nnoremap <Leader><C-F> mZ:cexpr system('ag -g ""')<BAR>copen<C-LEFT><RIGHT>
nnoremap <Leader>/b :call BufDoVim('')<LEFT><LEFT>

" delete matched lines
nnoremap <Leader>/d :g/\v/d<LEFT><LEFT>
nnoremap <Leader>/D :g/\v^/d<LEFT><LEFT>
nnoremap <Leader>/v :v/\v/d<LEFT><LEFT>
nnoremap <Leader>/V :v/\v^/d<LEFT><LEFT>
vnoremap <Leader>/d :g/\v/d<LEFT><LEFT>
vnoremap <Leader>/D :g/\v^/d<LEFT><LEFT>
vnoremap <Leader>/v :v/\v/d<LEFT><LEFT>
vnoremap <Leader>/V :v/\v^/d<LEFT><LEFT>

" to jump from one URL/Email/Guid to another
nnoremap <Leader>/u /\v\chttps?:\/\/[^\s/$.?#].\s*[a-z0-9.~:/?#[\]@!$&'()*+,;=`._%-]+/<CR>
nnoremap <Leader>/U /\v\c<[0-9a-z.-]+\@[0-9a-z.-]+\.\w{2,3}>/<CR>
nnoremap <Leader>/g /\v\c<[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}><CR> 
nnoremap <Leader>/j /\v\c"\zs(https?:\/)?\/[^"]+\.(js<BAR>css)\ze"/<CR>

" }}}
" Editing (Not Operator) {{{

" to avoid entering insert mode
nnoremap [<Space> O<ESC>j
nnoremap ]<Space> o<ESC>k
nnoremap <Leader><CR> mzi<CR><ESC>`z
nnoremap <Leader><Space> i<Space><ESC>

" remove empty/space-only lines
nnoremap <silent> <Leader>e :silent! execute '%s/\v^(%u00a0<BAR>%u3000<BAR>\s)*//g'<CR>:silent! execute 'g/^\s*$/,/\S/-j'<CR>:nohlsearch<CR>
nnoremap <silent> <Leader>E :silent! execute 'g/\v^(%u00a0<BAR>%u3000<BAR>\s)*$/d'<CR>:nohlsearch<CR>

" decorating
nnoremap <Leader>0 :s/\v^#+\s*//<CR>
nnoremap <Leader>1 :s/\v^#*\s*//<CR>I#<ESC>a<SPACE><ESC>:nohlsearch<CR>
nnoremap <Leader>2 :s/\v^#*\s*//<CR>2I#<ESC>a<SPACE><ESC>:nohlsearch<CR>
nnoremap <Leader>3 :s/\v^#*\s*//<CR>3I#<ESC>a<SPACE><ESC>:nohlsearch<CR>
nnoremap <Leader>4 :s/\v^#*\s*//<CR>4I#<ESC>a<SPACE><ESC>:nohlsearch<CR>
nnoremap <Leader>-= yypVr=k
nnoremap <Leader>-- yypVr-k

" quick join
nmap <Leader>,, <Plug>(JoinLines)ip,
nmap <Leader>,' <Plug>(JoinLines)ip',
nmap <Leader>," <Plug>(JoinLines)ip",

" repeatable spell correction
nmap <Plug>CorrectNextSpellError ]s1z=:call repeat#set("\<Plug>CorrectNextSpellError")<CR>
nmap <Leader>s <Plug>CorrectNextSpellError
nmap <Plug>CorrectPrevSpellError [s1z=:call repeat#set("\<Plug>CorrectPrevSpellError")<CR>
nmap <Leader>S <Plug>CorrectPrevSpellError

" manipulate js, html, xml, json
nnoremap <Leader>xs :%!xmlstarlet sel -t -m '' -c '.' -n<C-LEFT><C-LEFT><C-LEFT><LEFT><LEFT>
nnoremap <Leader>xv :%!xmlstarlet sel -t -v '//*/@' -n<C-LEFT><LEFT><LEFT>
nnoremap <Leader>jq :%!jq --indent 4 '.'<LEFT>

" }}}
" Fold {{{

nnoremap <Leader>z zMzvzz

" }}}
" Save, Close & Load {{{

inoremap <C-S> <C-O>:w<CR>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>W :wq<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>Q :q!<CR>
nnoremap <C-W>Q :qa!<CR>
nnoremap <silent> <Leader>r :silent! source %<CR>:nohlsearch<CR>

" }}}
" Window {{{

nnoremap <C-W>, :vnew<CR>
nnoremap <LEFT> <C-W><
nnoremap <RIGHT> <C-W>>
nnoremap <UP> <C-W>+
nnoremap <DOWN> <C-W>-

" }}}
" Tab Page {{{

nnoremap <C-W>N :$tabnew<CR>
nnoremap <C-W>% :$tabnew %<CR>
nnoremap <C-W>C :tabclose<CR>
nnoremap <C-W>V :call OpenRC('vim')<CR>
nnoremap <C-W>P :call OpenRC('bash')<CR>
nnoremap <C-W>R :call OpenRC('')<LEFT><LEFT>

" }}}
" Toggle/Change Options and Stuff {{{

nnoremap <ESC>b :call ToggleBackground()<CR>
nnoremap <ESC>l :set list!<CR>
nnoremap <ESC>s :set spell! spelllang=en_us<CR>
nnoremap <ESC>d :windo diffthis<CR>
nnoremap <ESC>D :windo diffoff<CR>
nnoremap <ESC>gs :call ChangeGruvboxContrast('soft')<CR>
nnoremap <ESC>gm :call ChangeGruvboxContrast('medium')<CR>
nnoremap <ESC>gh :call ChangeGruvboxContrast('hard')<CR>

" }}}
" Insert Mode {{{

" emacs-like
inoremap <C-B> <LEFT>

" break undo
inoremap <C-W> <C-G>u<C-W>
inoremap <CR> <C-]><C-G>u<CR>

" completion
inoremap <C-L> <C-X><C-L>
inoremap <C-F> <C-X><C-F>

" IME
inoremap <ESC> <ESC>:set iminsert=0<CR>
inoremap <C-[> <ESC>:set iminsert=0<CR>
inoremap <C-G>i <ESC>:set iminsert=2<CR>a

" misc
inoremap <C-C> <C-R>=strftime("%Y-%m-%d %H:%M:%S")<CR>
inoremap <C-D> <C-R>=strftime("%Y-%m-%d")<CR>

" }}}
" Command-Line Mode {{{

nnoremap <Leader>; q:

" make command-line mode more like readline
cnoremap <C-A> <HOME>
cnoremap <C-B> <LEFT>
cnoremap <C-F> <RIGHT>
cnoremap <C-H> <BS>
cnoremap <C-Y> <C-R>"
cnoremap <ESC><C-F> <C-F>
cnoremap <ESC><C-D> <C-D>

" }}}
" Snippets {{{

nnoremap <silent> <Leader>'c :-1read $VIMRUNTIME/skelton/React_Component.txt<CR>/class<CR>:nohlsearch<CR>ela
nnoremap <silent> <Leader>'C :-1read $VIMRUNTIME/skelton/React_Component_State.txt<CR>/class<CR>:nohlsearch<CR>ela
nnoremap <silent> <Leader>'n :-1read $VIMRUNTIME/skelton/React_Component_Constructor.txt<CR>/state<CR>:nohlsearch<CR>o
nnoremap <silent> <Leader>'i :-1read $VIMRUNTIME/skelton/TS_Interface.txt<CR>/{<CR>:nohlsearch<CR>hi
nnoremap <silent> <Leader>'h :-1read $VIMRUNTIME/skelton/html5.txt<CR>/title<CR>:nohlsearch<CR>cit
nnoremap <silent> <Leader>'r :-1read $VIMRUNTIME/skelton/html5_React.txt<CR>/title<CR>:nohlsearch<CR>cit
nnoremap <silent> <Leader>'R :-1read $VIMRUNTIME/skelton/html5_React_Babel.txt<CR>/title<CR>:nohlsearch<CR>cit
nnoremap <silent> <Leader>'x :-1read $VIMRUNTIME/skelton/xhtml.txt<CR>/title<CR>:nohlsearch<CR>cit
nnoremap <silent> <Leader>'l :-1read $VIMRUNTIME/skelton/lorem.txt<CR>

" }}}
" Misc {{{

" help
nnoremap <Leader>H :vertical help<Space>

" repeat command
nnoremap <Leader>. @:

" quickfix
nnoremap <C-N> :silent! cnext<CR>zz
nnoremap <C-P> :silent! cprevious<CR>zz
nnoremap <Leader>co :copen<CR>
nnoremap <Leader>cc :cclose<CR>

" dict
nnoremap <Leader><C-K> :call ShowWordDef(0)<CR>

" replay a macro recorded with qq
nnoremap Q @q

" IME
nnoremap <ESC>i :set iminsert=0<CR>
cnoremap <ESC>i :set iminsert=0<CR>

" check highlight group of current word
nnoremap <Leader>ch :call <SID>SynStack()<CR>

" }}}

" }}}

" AUTOCMD {{{

" All Types {{{

augroup KeepCursorPos
    autocmd!
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | execute "normal! g`\"" | endif
    autocmd VimResized * execute "normal! \<C-W>="
augroup END

augroup MyStatusLine
    autocmd!
    autocmd WinEnter,BufWinEnter * call SetMyStatusLine(1)
    autocmd WinLeave * call SetMyStatusLine(0)
augroup END

" }}}
" PowerShell {{{

augroup ft_ps1
    autocmd!
    autocmd FileType ps1 let maplocalleader = "\<Space>"
    autocmd FileType ps1 setlocal fileformat=dos
    autocmd FileType ps1 setlocal foldmethod=syntax
    autocmd FileType ps1 setlocal iskeyword+=$
    autocmd FileType ps1 nnoremap <buffer> ]] :call search('\v\c^\s*function\s+\w', 'W')<CR>
    autocmd FileType ps1 nnoremap <buffer> [[ :call search('\v\c^\s*function\s+\w', 'bW')<CR>
    autocmd FileType ps1 nnoremap <buffer> ]p :call search('\v\c^\s*\[Parameter\(', 'W')<CR>
    autocmd FileType ps1 nnoremap <buffer> [p :call search('\v\c^\s*\[Parameter\(', 'bW')<CR>
    autocmd FileType ps1 nnoremap <buffer> <LocalLeader>'f :-read $VIMRUNTIME/skelton/ps/function.txt<CR>A<Space>
    autocmd FileType ps1 nnoremap <buffer> <LocalLeader>'F :-read $VIMRUNTIME/skelton/ps/advanced_function.txt<CR>A<Space>
    autocmd FileType ps1 nnoremap <buffer> <LocalLeader>'p :-read $VIMRUNTIME/skelton/ps/parameter.txt<CR>9jA
    autocmd FileType ps1 iabbrev <buffer> al [Alias('')]
    autocmd FileType ps1 iabbrev <buffer> aec [AllowEmptyCollection()]
    autocmd FileType ps1 iabbrev <buffer> aes [AllowEmptyString()]
    autocmd FileType ps1 iabbrev <buffer> an [AllowNull()]
    autocmd FileType ps1 iabbrev <buffer> po [PSCustomObject]
    autocmd FileType ps1 iabbrev <buffer> vc [ValidateCount()]<LEFT><LEFT>
    autocmd FileType ps1 iabbrev <buffer> vl [ValidateLength()]<LEFT><LEFT>
    autocmd FileType ps1 iabbrev <buffer> vn [ValidateNotNull()]
    autocmd FileType ps1 iabbrev <buffer> vne [ValidateNotNullOrEmpty()]
    autocmd FileType ps1 iabbrev <buffer> vp [ValidatePattern('')]<LEFT><LEFT><LEFT>
    autocmd FileType ps1 iabbrev <buffer> vr [ValidateRange()]<LEFT><LEFT>
    autocmd FileType ps1 iabbrev <buffer> vs [ValidateSet()]<LEFT><LEFT>
    autocmd FileType ps1 iabbrev <buffer> vsc [ValidateScript({})]<LEFT><LEFT><LEFT>
    autocmd FileType ps1 syntax match ParamStart '\v^\s*\[[a-zA-Z]+\('
    autocmd FileType ps1 highlight link ParamStart PreProc
    autocmd FileType ps1 syntax match ParamEnd '\v\)\]'
    autocmd FileType ps1 highlight link ParamEnd PreProc
augroup END

function! PoshFolds()
    let thisline = getline(v:lnum)
    if thisline =~? '\v^\s*function\s+\w'
        return '>1'
    elseif thisline =~? '\v^\s*}'
        let lnum_with_pair = searchpair('{', '', '}', 'bnW', 'synIDattr(synID(line("."), col("."), 0), "name") =~? "string"')
        if getline(lnum_with_pair) =~? '\v^\s*function\s+\w'
            return '<1'
        endif
    else
        return '='
    endif
endfunction

" }}}
" PowerShell Help {{{

augroup ft_ps1help
    autocmd!
    autocmd FileType ps1help let maplocalleader = "\<Space>"
    autocmd FileType ps1help setlocal buftype=nofile
    autocmd FileType ps1help setlocal fileformat=dos
    autocmd FileType ps1help setlocal foldmethod=expr
    autocmd FileType ps1help setlocal foldexpr=PoshHelpFolds()
    autocmd FileType ps1help setlocal iskeyword+=$
    autocmd FileType ps1help syntax match PSHLevel1FoldHeading '\v^(NAME|SYNOPSIS|SYNTAX|PARAMETERS|INPUTS|OUTPUTS|ALIASES|REMARKS|NOTES|DESCRIPTION|LINK|RELATED\sLINKS)$'
    autocmd FileType ps1help highlight link PSHLevel1FoldHeading Directory
    autocmd FileType ps1help syntax match PSHLevel2FoldHeading '\v^\s{4}(-[a-zA-Z].+\s\[?\<[a-zA-Z0-9]+\>\]?|\<CommonParameters\>)$'
    autocmd FileType ps1help highlight link PSHLevel2FoldHeading MoreMsg
    autocmd FileType ps1help syntax match PSHExample '\v^\s+-+\sEXAMPLE\s\d+\s-+$'
    autocmd FileType ps1help highlight link PSHExample Question
    autocmd FileType ps1help syntax match PSHExamplePrompt '\v^\s{4}PS\sC:\\\>'
    autocmd FileType ps1help highlight link PSHExamplePrompt MoreMsg
    autocmd FileType ps1help syntax match PSHOptionalParam '\v\[?\[-[a-zA-Z]\w+\]?(\s\<[a-zA-Z0-9]+\>|\s\{[^}]+\})?\]'
    autocmd FileType ps1help syntax match PSHOptionalParam '\v\[-[a-zA-Z]\w+\s*$'
    autocmd FileType ps1help syntax match PSHOptionalParam '\v\<[a-zA-Z0-9]+(\[\])?\>\]'
    autocmd FileType ps1help syntax match PSHOptionalParam '\v\[\<CommonParameters\>\]'
    autocmd FileType ps1help highlight link PSHOptionalParam Comment
    autocmd FileType ps1help syntax match PSHHighlighted '\v^\s{8}Default\svalue\s+\zs.+$'
    autocmd FileType ps1help syntax match PSHHighlighted '\v^\s{8}Accept\spipeline\sinput\?\s+\zstrue$'
    autocmd FileType ps1help highlight link PSHHighlighted Statement
    autocmd FileType ps1help execute "normal \<F11>"
    autocmd FileType ps1help execute "normal zR"
augroup END

function! PoshHelpFolds()
    let thisline = getline(v:lnum)
    if thisline =~? '\v^(NAME|SYNOPSIS|SYNTAX|PARAMETERS|INPUTS|OUTPUTS|ALIASES|REMARKS|NOTES|DESCRIPTION|LINK|RELATED\sLINKS)$'
        return '>1'
    elseif thisline =~? '\v^\s+-+\sEXAMPLE\s\d+\s-+$'
        return '>1'
    elseif thisline =~? '\v^\s{4}(-[a-zA-Z].+\s\[?\<[a-zA-Z0-9]+\>\]?|\<CommonParameters\>)$'
        return '>2'
    else
        return '='
    endif
endfunction

" }}}
" Markdown {{{

augroup ft_markdown
    autocmd!
    autocmd FileType markdown,vimwiki let maplocalleader = "\<Space>"
    autocmd FileType markdown,vimwiki nnoremap <buffer> <LocalLeader>gc I<!-- <ESC>A --><ESC>
    autocmd FileType markdown,vimwiki vnoremap <buffer> <LocalLeader>gc :normal! I<--! <ESC>gv:normal! A --><ESC>
    autocmd FileType markdown,vimwiki nnoremap <buffer> <LocalLeader>b cip```<CR>```<ESC>P
    autocmd FileType markdown,vimwiki nnoremap <buffer> <LocalLeader>B cip```<CR>```<ESC>PkA<Space>
    autocmd FileType markdown,vimwiki vnoremap <buffer> <LocalLeader>b <ESC>'<O```<ESC>'>o```<ESC>'<
    autocmd FileType markdown,vimwiki vnoremap <buffer> <LocalLeader>B <ESC>'<O```<ESC>'>o```<ESC>'<kA<Space>
augroup END

" }}}

" }}}

" DICTIONARY {{{

function! ShowWordDef(vertical)
    let cword     = expand('<cword>')
    let dict_cmd  = 'sdcv'
    let wordclass = 'noun|pronoun|adjective|verb|adverb|preposition|conjunction|interjection'

    let winnr = bufwinnr('__WordDef__')
    if winnr > 0
        execute winnr . 'wincmd w'
    else
        if a:vertical
            vsplit __WordDef__
        else
            20split __WordDef__
        endif
    endif

    setlocal filetype=wdef
    setlocal buftype=nofile

    let reg = getreg('@')

    normal ggdG
    silent! execute '-1read !' . dict_cmd . ' ' . cword
    execute "normal ggdapdiWVpI#\ "
    silent! %s/\v^\s*//
    silent! %s/\v\s+/ /g
    silent! execute '%s/\v(' . wordclass . ')/\r\1/g'
    silent! %s/\v\s*BrE/\r\rBrE/
    silent! %s/\v\s*NAmE/\rNAmE/
    silent! %s/\v^â€¢\s*/  - /
    silent! %s/\v^(\d+\..*\s*)$/\r\1\r/
    silent! %s/\v^([A-Z].*:\s*)$/\r\1\r/
    normal gg

    call setreg('@', reg)
endfunction

augroup ft_wdef
    autocmd!
    autocmd FileType wdef syntax match WDefWord '\v^#.*\s*$'
    autocmd FileType wdef highlight link WDefWord vimFuncName
    autocmd FileType wdef syntax match WDefDef '\v^\d+\..*\s*$'
    autocmd FileType wdef highlight link WDefDef HelpOption
augroup END

" man

let $GROFF_NO_SGR=1
source $VIMRUNTIME/ftplugin/man.vim

" }}}

" MS WINDOWS {{{

if has('win32')
    " options
    set fileformat=unix
    set fileformats=unix,dos
    set fencs=utf-8,ucs-bom,iso-2022-jp,euc-jp,cp932,utf-16le,utf-16,default
    set encoding=utf-8      " The encoding displayed.
    set fileencoding=utf-8  " The encoding written to file.
    set ambiwidth=double
    set clipboard=unnamed

    " functions
    function! SetWinShell(shell)
        if a:shell ==# 'posh'
            set shell=powershell
            set shellcmdflag=-ExecutionPolicy\ RemoteSigned
        elseif a:shell ==# 'cmd'
            set shell=C:\\WINDOWS\\system32\\cmd.exe
            set shellcmdflag=/c
        endif
    endfunction

    function! ListMyPSModules(A, L, P)
        let my_ps_mod_dir = "$USERPROFILE\\Documents\\WindowsPowerShell\\MyModules"
        let prefix = a:A . '*'
        let mod_full_paths = split(globpath(my_ps_mod_dir, prefix), '\n')
        let mod_names = []
        for p in mod_full_paths
            let segments = split(p, '\')
            let basename = segments[-1]
            let mod_names += [ basename ]
        endfor
        return mod_names
    endfunction

    function! OpenPSModule(ps_module)
        let dir = '$USERPROFILE\\Documents\\WindowsPowerShell\\MyModules\\' . a:ps_module
        let ps1s = split(globpath(dir, '**/*.ps1'), '\n')
        for p in ps1s
            silent! execute 'argadd ' . p
        endfor
        silent! execute 'lcd ' . dir
        silent! execute 'e ' . a:ps_module . '.psd1'
    endfunction

    command! -nargs=1 -complete=customlist,ListMyPSModules OpenPSMod call OpenPSModule(<q-args>)
    nnoremap <Leader>pm :OpenPSMod<Space>

    if has('gui_running')
        let cwd = getcwd()
        if cwd ==# 'C:\Windows\System32'
            cd ~/Desktop
        endif

        set mouse=
        set guioptions-=a
        set guioptions-=i
        set guioptions-=m
        set guioptions-=t
        set guioptions-=T
        set guioptions-=r
        set guioptions-=R
        set guioptions-=l
        set guioptions-=L
        set guioptions-=b
        set guioptions-=h
        set guioptions-=v
        set guioptions-=p
        set guioptions-=F
        set guioptions-=e    " don't show gui tabline!
        set linespace=2
        set guifont=Consolas\ NF:h13
        set guifontwide=mplus\ NF:h12

        nmap <F11> :call libcallnr('gvimfullscreen.dll', 'ToggleFullScreen', 0)<CR>
        nmap <silent> <Leader>r :silent! source %<CR>:nohlsearch<CR><F11><F11>
        nmap <C-W>P :$tabnew $HOME/Documents/WindowsPowerShell/profile.ps1<CR><F11><F11>
        nmap <C-Up> :call ChangeGUIFontSize(0)<CR><F11><F11>
        nmap <C-Down> :call ChangeGUIFontSize(1)<CR><F11><F11>

        function! ChangeGUIFontSize(decrease)
            let parts    = split(&guifont, ':')
            let facename = parts[0]
            let fontsize = substitute(parts[1], 'h', '', '')

            if a:decrease
                let fontsize -= 1
            else
                let fontsize += 1
            endif

            let &guifont = printf('%s:h%d', facename, fontsize)
        endfunction
    else
        " syntax off
        syntax off
        set t_Co=256
        set term=xterm

        " workaround for conemu's bug
        inoremap <C-H> <BS>
        inoremap <Char-0x07F> <BS>
        nnoremap <Char-0x07F> <BS>
    endif
endif

" }}}

" TESTING {{{


" }}}
